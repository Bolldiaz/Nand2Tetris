// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;

     PARTS:
     ShiftLeft(in=x, out=leftX);
     ShiftLeft(in=y, out=leftY);
     ShiftRight(in=x, out=rightX);
     ShiftRight(in=y, out=rightY);
     Mux4Way16(a=rightY, b=rightX, c=leftY, d=leftX, sel=instruction[4..5], out=shifted); // shift choice

     // calculate: (shifted & true) or ALU(x,y) in accordance with flag:
     And(a=instruction[7], b=instruction[8], out=flag);
     Mux16(a=shifted, b=x, sel=flag, out=newX);
     Mux16(a=true, b=y, sel=flag, out=newY);
     Mux16(a=false, b[0..5]=instruction[0..5], b[6..15]=false, sel=flag, out[0]=no, out[1]=f, out[2]=ny, out[3]=zy, out[4]=nx, out[5]=zx, out[6..15]=null);
     
     ALU(x=newX, y=newY, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=out, zr=zr, ng=ng);
}