// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // decode instructions:
    Mux16(a[0..4]=false, a[5]=true, a[6..15]=false, b=instruction, sel=instruction[15], out=flags);
    And16(a=flags, b=true, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[12]=a, out[6..14]=newInst);
    
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA); // ARegister input

    And(a=d3, b=true, out=writeM); // writeM

    ARegister(in=inA, load=d1, out[0..14]=addressM, out=outA); // addressM
    DRegister(in=outALU, load=d2, out=outD);
    Mux16(a=outA, b=inM, sel=a, out=mOrA);
    ExtendAlu(x=outD, y=mOrA, instruction=newInst, out=outALU, out=outM, zr=zr, ng=ng); // outM
    
    // PC-load calculating:
    Not(in=zr, out=Nzr);
    Not(in=ng, out=Nng);
    And(a=Nzr, b=Nng, out=ps);
    And(a=zr, b=j2, out=zeroCondition);
    And(a=ng, b=j1, out=negCondition);
    And(a=ps, b=j3, out=posCondition);
    Or(a=zeroCondition, b=negCondition, out=zerOrNeg);
    Or(a=zerOrNeg, b=posCondition, out=pcLoad); // pc load - condition jump fullfilled
    
    Not(in=pcLoad, out=pcInc);
    PC(in=outA, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc, out[15]=null); // pc
}
